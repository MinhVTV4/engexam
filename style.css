<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Version Control App</title>
    
    <!-- Google Font: Inter -->
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    
    <!-- **FIX**: Configure Tailwind CDN to always include layout classes -->
    <script>
        tailwind.config = {
            // The 'safelist' ensures these classes are generated by the CDN,
            // even if they are inside a 'hidden' element on initial page load.
            safelist: [
                'lg:grid-cols-12',
                'lg:col-span-3',
                'lg:col-span-6'
            ]
        }
    </script>

    <!-- Tailwind CSS CDN -->
    <script src="https://cdn.tailwindcss.com"></script>

    <style>
        /* Apply Inter font to the body */
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f3f4f6; /* Light gray background */
            color: #374151; /* Dark gray text color */
        }
        /* Styling for the code display area */
        .code-container {
            background-color: #1a202c; /* Dark background for code */
            color: #cbd5e0; /* Light text color for code */
            padding: 1rem;
            border-radius: 0.5rem; /* Rounded corners */
            overflow-x: auto; /* Enable horizontal scrolling for long lines */
            font-family: 'JetBrains Mono', 'Fira Code', monospace; /* Monospace font for code */
            box-shadow: inset 0 2px 4px 0 rgba(0, 0, 0, 0.06); /* Inner shadow for depth */
        }
        pre {
            margin: 0;
            white-space: pre-wrap; /* Wrap long lines of code */
            word-break: break-all; /* Break words if necessary to fit */
        }
        /* Custom scrollbar for the code container for better aesthetics */
        .code-container::-webkit-scrollbar {
            height: 8px;
            width: 8px;
        }
        .code-container::-webkit-scrollbar-track {
            background: #2d3748; /* Darker track */
            border-radius: 10px;
        }
        .code-container::-webkit-scrollbar-thumb {
            background: #4a5568; /* Lighter thumb */
            border-radius: 10px;
        }
        .code-container::-webkit-scrollbar-thumb:hover {
            background: #6b7280; /* Even lighter on hover */
        }

        /* Styling for buttons to add a subtle shadow and transition */
        button {
            transition: all 0.3s ease;
        }
        button:hover {
            transform: translateY(-1px);
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
        }

        /* Styling for list items to add subtle shadow and transition */
        .list-item {
            transition: all 0.2s ease;
        }
        .list-item:hover {
            transform: translateY(-1px);
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
        }
    </style>
</head>
<body class="min-h-screen flex flex-col">
    <!-- Header Section -->
    <header class="bg-gradient-to-r from-blue-500 to-purple-600 text-white p-4 shadow-lg flex justify-between items-center">
        <h1 class="text-3xl font-bold">Version Control System</h1>
        <div id="authStatus" class="flex items-center space-x-4">
            <span id="userEmailDisplay" class="text-lg font-medium hidden"></span>
            <button id="logoutBtn" class="bg-red-500 hover:bg-red-600 text-white font-bold py-2 px-4 rounded-lg shadow-md transition duration-300 hidden">
                Đăng xuất
            </button>
        </div>
    </header>

    <!-- Login/Register Section -->
    <div id="authSection" class="flex-grow flex items-center justify-center p-4">
        <div class="bg-white p-8 rounded-lg shadow-xl w-full max-w-md">
            <h2 class="text-3xl font-bold mb-6 text-center text-gray-800">Đăng nhập / Đăng ký</h2>
            <div class="mb-4">
                <label for="emailInput" class="block text-gray-700 text-sm font-bold mb-2">Email:</label>
                <input type="email" id="emailInput" placeholder="your@example.com" class="shadow appearance-none border rounded-lg w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline focus:border-blue-500">
            </div>
            <div class="mb-6">
                <label for="passwordInput" class="block text-gray-700 text-sm font-bold mb-2">Mật khẩu:</label>
                <input type="password" id="passwordInput" placeholder="********" class="shadow appearance-none border rounded-lg w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline focus:border-blue-500">
            </div>
            <div class="flex flex-col sm:flex-row gap-4">
                <button id="loginBtn" class="bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded-lg shadow-md transition duration-300 flex-grow">
                    Đăng nhập
                </button>
                <button id="registerBtn" class="bg-green-500 hover:bg-green-600 text-white font-bold py-2 px-4 rounded-lg shadow-md transition duration-300 flex-grow">
                    Đăng ký
                </button>
            </div>
            <p class="text-red-500 text-sm mt-4 text-center" id="authErrorMsg"></p>
        </div>
    </div>

    <!-- Main Content Area (Hidden until authenticated) -->
    <!-- On large screens (lg:), the grid is divided into 12 columns.
         Applications and Versions take 3 columns each (25% + 25%),
         and Code Editor & Viewer takes 6 columns (50%). -->
    <main id="mainAppContent" class="flex-grow container mx-auto p-4 grid grid-cols-1 lg:grid-cols-12 gap-6 hidden">
        <!-- Left Panel: Applications List -->
        <section class="bg-white p-6 rounded-lg shadow-md col-span-1 lg:col-span-3">
            <h2 class="text-2xl font-semibold mb-4 text-gray-800">Applications</h2>
            <!-- Button to add a new application -->
            <button id="addNewAppBtn" class="bg-green-500 hover:bg-green-600 text-white font-bold py-2 px-4 rounded-lg shadow-md transition duration-300 mb-4 w-full">
                Add New Application
            </button>
            <!-- Container for the list of applications -->
            <div id="applicationsList" class="space-y-3 max-h-96 overflow-y-auto pr-2">
                <!-- Placeholder for loading state -->
                <div class="text-gray-500 text-center py-4">Loading applications...</div>
            </div>
        </section>

        <!-- Middle Panel: Versions List -->
        <section class="bg-white p-6 rounded-lg shadow-md col-span-1 lg:col-span-3">
            <h2 class="text-2xl font-semibold mb-4 text-gray-800">Versions for <span id="currentAppName" class="font-bold text-blue-600">No App Selected</span></h2>
            <!-- Container for the list of versions -->
            <div id="versionsList" class="space-y-3 max-h-96 overflow-y-auto pr-2">
                <!-- Placeholder for initial state -->
                <div class="text-gray-500 text-center py-4">Select an application to see versions.</div>
            </div>
        </section>

        <!-- Right Panel: Code Editor & Viewer -->
        <section class="bg-white p-6 rounded-lg shadow-md col-span-1 lg:col-span-6">
            <h2 class="text-2xl font-semibold mb-4 text-gray-800">Code Editor & Viewer</h2>

            <!-- Input for Version Notes -->
            <div class="mb-4">
                <label for="versionNotesInput" class="block text-gray-700 text-sm font-bold mb-2">Version Notes:</label>
                <input type="text" id="versionNotesInput" placeholder="e.g., 'Initial commit', 'Bug fix for login'" class="shadow appearance-none border rounded-lg w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline focus:border-blue-500">
            </div>

            <!-- File Input Area -->
            <h3 class="text-xl font-semibold mb-3 text-gray-800">Files for this Version:</h3>
            <div id="fileInputContainer" class="space-y-4 mb-4 border p-3 rounded-lg bg-gray-50">
                <!-- Dynamic file input groups will be added here -->
                <div class="text-gray-500 text-center py-2">Click "Thêm tệp mới" to add files.</div>
            </div>
            <button id="addFileInputBtn" class="bg-purple-500 hover:bg-purple-600 text-white font-bold py-2 px-4 rounded-lg shadow-md transition duration-300 mb-6 w-full">
                Thêm tệp mới
            </button>

            <!-- Action Buttons for Code Editor -->
            <div class="flex flex-col sm:flex-row gap-4 mb-6">
                <button id="saveVersionBtn" class="bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded-lg shadow-md transition duration-300 flex-grow">
                    Lưu phiên bản mới
                </button>
                <button id="copyCodeBtn" class="bg-gray-700 hover:bg-gray-800 text-white font-bold py-2 px-4 rounded-lg shadow-md transition duration-300 flex-grow">
                    Sao chép mã hiển thị
                </button>
            </div>

            <!-- Displayed Files List (when viewing a version) -->
            <h3 class="text-xl font-semibold mb-3 text-gray-800">Tệp trong phiên bản:</h3>
            <div id="versionFilesList" class="space-y-2 mb-4 max-h-64 overflow-y-auto pr-2 border p-3 rounded-lg bg-gray-50">
                <div class="text-gray-500 text-center py-2">Chọn một phiên bản để xem các tệp của nó.</div>
            </div>

            <!-- Code Viewer Area -->
            <h3 class="text-xl font-semibold mb-3 text-gray-800">Mã hiển thị:</h3>
            <div id="codeViewer" class="code-container min-h-[150px]">
                <pre><code id="displayedCode">Chọn một tệp để xem mã của nó.</code></pre>
            </div>
        </section>
    </main>

    <!-- Modal for Add New App -->
    <div id="addNewAppModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center hidden z-50">
        <div class="bg-white p-8 rounded-lg shadow-xl w-full max-w-md">
            <h3 class="text-2xl font-bold mb-6 text-gray-800">Add New Application</h3>
            <div class="mb-4">
                <label for="newAppNameInput" class="block text-gray-700 text-sm font-bold mb-2">Application Name:</label>
                <input type="text" id="newAppNameInput" placeholder="e.g., 'My Blog App'" class="shadow appearance-none border rounded-lg w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline focus:border-blue-500">
            </div>
            <div class="flex justify-end gap-4">
                <button id="cancelNewAppBtn" class="bg-gray-300 hover:bg-gray-400 text-gray-800 font-bold py-2 px-4 rounded-lg transition duration-300">Cancel</button>
                <button id="confirmNewAppBtn" class="bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded-lg transition duration-300">Add Application</button>
            </div>
        </div>
    </div>

    <!-- Custom Alert/Message Box (instead of alert()) -->
    <div id="messageBox" class="fixed bottom-4 right-4 bg-gray-800 text-white px-6 py-3 rounded-lg shadow-lg hidden z-50 transition-opacity duration-300 opacity-0">
        <span id="messageContent"></span>
    </div>

    <!-- Firebase SDK and custom script -->
    <script type="module">
        // Import necessary Firebase functions from the SDKs
        import { initializeApp } from "https://www.gstatic.com/firebasejs/12.0.0/firebase-app.js";
        import { getAuth, signInAnonymously, signInWithCustomToken, onAuthStateChanged, createUserWithEmailAndPassword, signInWithEmailAndPassword, signOut } from "https://www.gstatic.com/firebasejs/12.0.0/firebase-auth.js";
        import { getFirestore, collection, doc, addDoc, getDocs, getDoc, onSnapshot, query, orderBy, deleteDoc } from "https://www.gstatic.com/firebasejs/12.0.0/firebase-firestore.js";

        // Your web app's Firebase configuration (provided by the user)
        const firebaseConfig = {
            apiKey: "AIzaSyD7I9ZKYFTc71tFMGA2lM72ykwDuwhEV0o",
            authDomain: "tudien-b2d17.firebaseapp.com",
            projectId: "tudien-b2d17",
            storageBucket: "tudien-b2d17.firebasestorage.app",
            messagingSenderId: "496472238606",
            appId: "1:496472238606:web:79769d3c38e546a27dea5f"
        };

        // Initialize Firebase app and get Firestore and Auth instances
        const app = initializeApp(firebaseConfig);
        const db = getFirestore(app);
        const auth = getAuth(app);

        // Global state variables for the application
        let currentAppId = null; // Stores the ID of the currently selected application
        let currentAppName = null; // Stores the name of the currently selected application
        let userId = null; // Stores the authenticated user's ID
        let isAuthReady = false; // Flag to indicate if Firebase authentication is ready
        let fileInputCounter = 0; // Counter for unique IDs for dynamic file inputs
        let activeFileElements = {}; // Stores references to dynamically created file input elements by their unique ID

        // Get references to DOM elements
        const applicationsList = document.getElementById('applicationsList');
        const versionsList = document.getElementById('versionsList');
        const currentAppNameSpan = document.getElementById('currentAppName');
        const versionNotesInput = document.getElementById('versionNotesInput');
        const displayedCode = document.getElementById('displayedCode');
        const saveVersionBtn = document.getElementById('saveVersionBtn');
        const copyCodeBtn = document.getElementById('copyCodeBtn');
        const addNewAppBtn = document.getElementById('addNewAppBtn');
        const addNewAppModal = document.getElementById('addNewAppModal');
        const newAppNameInput = document.getElementById('newAppNameInput');
        const confirmNewAppBtn = document.getElementById('confirmNewAppBtn');
        const cancelNewAppBtn = document.getElementById('cancelNewAppBtn');
        const messageBox = document.getElementById('messageBox');
        const messageContent = document.getElementById('messageContent');

        // Auth related DOM elements
        const authSection = document.getElementById('authSection');
        const mainAppContent = document.getElementById('mainAppContent');
        const emailInput = document.getElementById('emailInput');
        const passwordInput = document.getElementById('passwordInput');
        const loginBtn = document.getElementById('loginBtn');
        const registerBtn = document.getElementById('registerBtn');
        const logoutBtn = document.getElementById('logoutBtn');
        const userEmailDisplay = document.getElementById('userEmailDisplay');
        const authErrorMsg = document.getElementById('authErrorMsg');

        // New elements for multi-file support
        const fileInputContainer = document.getElementById('fileInputContainer');
        const addFileInputBtn = document.getElementById('addFileInputBtn');
        const versionFilesList = document.getElementById('versionFilesList');


        /**
         * Displays a custom message box instead of the native alert().
         * @param {string} message - The message to display.
         * @param {number} duration - How long to display the message in milliseconds.
         */
        function showMessage(message, duration = 3000) {
            messageContent.textContent = message;
            messageBox.classList.remove('hidden', 'opacity-0');
            messageBox.classList.add('opacity-100');
            setTimeout(() => {
                messageBox.classList.remove('opacity-100');
                messageBox.classList.add('opacity-0');
                setTimeout(() => {
                    messageBox.classList.add('hidden');
                }, 300); // Allow fade-out transition to complete
            }, duration);
        }

        /**
         * Displays authentication error messages.
         * @param {string} message - The error message.
         */
        function showAuthError(message) {
            authErrorMsg.textContent = message;
            authErrorMsg.classList.remove('hidden');
            setTimeout(() => {
                authErrorMsg.classList.add('hidden');
            }, 5000); // Hide error after 5 seconds
        }

        // --- Firebase Authentication ---
        // Listen for authentication state changes
        onAuthStateChanged(auth, async (user) => {
            if (user) {
                // User is signed in
                userId = user.uid;
                userEmailDisplay.textContent = user.email || "Người dùng ẩn danh";
                userEmailDisplay.classList.remove('hidden');
                logoutBtn.classList.remove('hidden');
                authSection.classList.add('hidden'); // Hide auth section
                mainAppContent.classList.remove('hidden'); // Show main app content
                console.log("Authenticated as:", userId, user.email);
            } else {
                // No user is signed in
                userId = null;
                userEmailDisplay.classList.add('hidden');
                logoutBtn.classList.add('hidden');
                authSection.classList.remove('hidden'); // Show auth section
                mainAppContent.classList.add('hidden'); // Hide main app content
                console.log("No user signed in.");

                // Attempt anonymous sign-in or custom token sign-in if available
                try {
                    if (typeof __initial_auth_token !== 'undefined' && __initial_auth_token) {
                        await signInWithCustomToken(auth, __initial_auth_token);
                        // If successful, onAuthStateChanged will be triggered again with the user
                    } else {
                        await signInAnonymously(auth);
                        // If successful, onAuthStateChanged will be triggered again with the user
                    }
                } catch (error) {
                    console.error("Initial authentication attempt failed:", error);
                    // Fallback: If authentication fails, use a random UUID as a temporary user ID.
                    // Note: Data saved with a random UUID will not be tied to a persistent user session.
                    userId = crypto.randomUUID();
                    console.warn("Using a random userId due to authentication error:", userId);
                    showMessage("Authentication failed. Using a temporary ID. Data might not persist across sessions.", 5000);
                }
            }
            isAuthReady = true; // Set flag to true once authentication is handled
            // Once authentication is ready and user is logged in, load the applications
            if (isAuthReady && userId) {
                loadApplications();
            } else if (isAuthReady && !userId) {
                // If auth ready but no user (e.g., explicit logout), clear app content
                applicationsList.innerHTML = '<div class="text-gray-500 text-center py-4">Vui lòng đăng nhập để xem ứng dụng.</div>';
                versionsList.innerHTML = '<div class="text-gray-500 text-center py-4">Vui lòng đăng nhập để xem phiên bản.</div>';
                currentAppNameSpan.textContent = 'No App Selected';
                clearFileInputs();
                displayedCode.textContent = 'Chọn một tệp để xem mã của nó.';
                versionFilesList.innerHTML = '<div class="text-gray-500 text-center py-2">Chọn một phiên bản để xem các tệp của nó.</div>';
            }
        });

        /**
         * Handles user registration with email and password.
         */
        async function handleRegister() {
            const email = emailInput.value.trim();
            const password = passwordInput.value.trim();

            if (!email || !password) {
                showAuthError("Vui lòng nhập email và mật khẩu.");
                return;
            }

            try {
                await createUserWithEmailAndPassword(auth, email, password);
                showMessage("Đăng ký thành công! Bạn đã được đăng nhập.", 3000);
                authErrorMsg.textContent = ''; // Clear any previous error
            } catch (error) {
                console.error("Registration error:", error);
                let errorMessage = "Đăng ký thất bại. Vui lòng thử lại.";
                if (error.code === 'auth/email-already-in-use') {
                    errorMessage = "Email này đã được sử dụng. Vui lòng đăng nhập hoặc sử dụng email khác.";
                } else if (error.code === 'auth/weak-password') {
                    errorMessage = "Mật khẩu quá yếu. Mật khẩu phải có ít nhất 6 ký tự.";
                }
                showAuthError(errorMessage);
            }
        }

        /**
         * Handles user login with email and password.
         */
        async function handleLogin() {
            const email = emailInput.value.trim();
            const password = passwordInput.value.trim();

            if (!email || !password) {
                showAuthError("Vui lòng nhập email và mật khẩu.");
                return;
            }

            try {
                await signInWithEmailAndPassword(auth, email, password);
                showMessage("Đăng nhập thành công!", 3000);
                authErrorMsg.textContent = ''; // Clear any previous error
            } catch (error) {
                console.error("Login error:", error);
                let errorMessage = "Đăng nhập thất bại. Vui lòng kiểm tra email và mật khẩu.";
                if (error.code === 'auth/invalid-credential') {
                    errorMessage = "Email hoặc mật khẩu không đúng.";
                } else if (error.code === 'auth/user-not-found') {
                    errorMessage = "Không tìm thấy người dùng với email này.";
                } else if (error.code === 'auth/wrong-password') {
                    errorMessage = "Mật khẩu không đúng.";
                }
                showAuthError(errorMessage);
            }
        }

        /**
         * Handles user logout.
         */
        async function handleLogout() {
            try {
                await signOut(auth);
                showMessage("Bạn đã đăng xuất.", 3000);
                // The onAuthStateChanged listener will handle UI updates
            } catch (error) {
                console.error("Logout error:", error);
                showMessage("Đăng xuất thất bại. Vui lòng thử lại.", 4000);
            }
        }


        // --- Firestore Data Paths ---
        // Get the Canvas app ID for data isolation. If not defined, use a default ID.
        const canvasAppId = typeof __app_id !== 'undefined' ? __app_id : 'default-version-control-app';

        /**
         * Returns the Firestore collection reference for applications.
         * Data is stored privately under `/artifacts/{appId}/users/{userId}/applications`.
         * @returns {firebase.firestore.CollectionReference}
         */
        const getApplicationsCollectionRef = () => {
            // Changed path to store data per user
            return collection(db, `artifacts/${canvasAppId}/users/${userId}/applications`);
        };

        /**
         * Returns the Firestore collection reference for versions of a specific application.
         * Versions are sub-collections of applications.
         * @param {string} appId - The ID of the application.
         * @returns {firebase.firestore.CollectionReference}
         */
        const getVersionsCollectionRef = (appId) => {
            // Changed path to store data per user
            return collection(db, `artifacts/${canvasAppId}/users/${userId}/applications/${appId}/versions`);
        };

        /**
         * Returns the Firestore collection reference for files of a specific version.
         * Files are sub-collections of versions.
         * @param {string} appId - The ID of the application.
         * @param {string} versionId - The ID of the version.
         * @returns {firebase.firestore.CollectionReference}
         */
        const getFilesCollectionRef = (appId, versionId) => {
            // Changed path to store data per user
            return collection(db, `artifacts/${canvasAppId}/users/${userId}/applications/${appId}/versions/${versionId}/files`);
        };

        // --- UI Rendering Functions ---

        /**
         * Loads and displays the list of applications from Firestore.
         * Uses `onSnapshot` for real-time updates to the UI.
         */
        async function loadApplications() {
            if (!isAuthReady || !userId) {
                // If authentication is not ready or user is not logged in, display a message and return
                applicationsList.innerHTML = '<div class="text-gray-500 text-center py-4">Vui lòng đăng nhập để xem ứng dụng.</div>';
                return;
            }

            applicationsList.innerHTML = '<div class="text-gray-500 text-center py-4">Đang tải ứng dụng...</div>';

            try {
                // Create a query to order applications by name
                const q = query(getApplicationsCollectionRef(), orderBy('name'));

                // Set up a real-time listener for application changes
                onSnapshot(q, (snapshot) => {
                    applicationsList.innerHTML = ''; // Clear the current list
                    if (snapshot.empty) {
                        applicationsList.innerHTML = '<div class="text-gray-500 text-center py-4">Không tìm thấy ứng dụng nào. Hãy thêm một ứng dụng mới!</div>';
                        return;
                    }
                    // Iterate through each application document and create a UI element
                    snapshot.forEach(doc => {
                        const app = doc.data();
                        const appItem = document.createElement('div');
                        appItem.id = `app-${doc.id}`; // Unique ID for the app item
                        appItem.className = 'list-item bg-gray-100 hover:bg-blue-100 p-3 rounded-lg cursor-pointer transition duration-200 shadow-sm flex justify-between items-center';
                        appItem.innerHTML = `
                            <span class="font-medium text-gray-700">${app.name}</span>
                            <span class="text-sm text-gray-500">ID: ${doc.id.substring(0, 8)}...</span>
                        `;
                        // Attach click event to select the application
                        appItem.onclick = () => selectApplication(doc.id, app.name);
                        applicationsList.appendChild(appItem);
                    });

                    // If an application was previously selected, re-highlight it
                    if (currentAppId) {
                        const selectedAppElement = document.getElementById(`app-${currentAppId}`);
                        if (selectedAppElement) {
                            selectedAppElement.classList.remove('bg-gray-100');
                            selectedAppElement.classList.add('bg-blue-200', 'border-blue-500', 'border-2');
                        }
                    }
                });
            } catch (error) {
                console.error("Error loading applications:", error);
                applicationsList.innerHTML = '<div class="text-red-500 text-center py-4">Lỗi khi tải ứng dụng.</div>';
                showMessage("Lỗi khi tải ứng dụng.", 4000);
            }
        }

        /**
         * Selects an application, updates the UI, and loads its versions.
         * @param {string} appId - The ID of the selected application.
         * @param {string} appName - The name of the selected application.
         */
        async function selectApplication(appId, appName) {
            currentAppId = appId;
            currentAppName = appName;
            currentAppNameSpan.textContent = appName; // Update the app name in the versions panel header
            console.log(`Selected application: ${appName} (ID: ${appId})`);

            // Remove highlight from all application items
            document.querySelectorAll('#applicationsList > div').forEach(item => {
                item.classList.remove('bg-blue-200', 'border-blue-500', 'border-2');
                item.classList.add('bg-gray-100');
            });
            // Add highlight to the newly selected application item
            const selectedAppElement = document.getElementById(`app-${appId}`);
            if (selectedAppElement) {
                selectedAppElement.classList.remove('bg-gray-100');
                selectedAppElement.classList.add('bg-blue-200', 'border-blue-500', 'border-2');
            }

            // Load versions for the selected application
            loadVersions(appId);
            // Clear the file inputs and viewer when a new app is selected
            clearFileInputs();
            versionNotesInput.value = '';
            displayedCode.textContent = 'Chọn một tệp để xem mã của nó.';
            versionFilesList.innerHTML = '<div class="text-gray-500 text-center py-2">Chọn một phiên bản để xem các tệp của nó.</div>';
        }

        /**
         * Loads and displays versions for the selected application from Firestore.
         * Uses `onSnapshot` for real-time updates.
         * @param {string} appId - The ID of the application.
         */
        async function loadVersions(appId) {
            if (!isAuthReady || !userId || !appId) {
                versionsList.innerHTML = '<div class="text-gray-500 text-center py-4">Chọn một ứng dụng để xem phiên bản.</div>';
                return;
            }

            versionsList.innerHTML = '<div class="text-gray-500 text-center py-4">Đang tải phiên bản...</div>';

            try {
                // Create a query to order versions by timestamp in descending order (latest first)
                const q = query(getVersionsCollectionRef(appId), orderBy('timestamp', 'desc'));

                // Set up a real-time listener for version changes
                onSnapshot(q, (snapshot) => {
                    versionsList.innerHTML = ''; // Clear the current list
                    if (snapshot.empty) {
                        versionsList.innerHTML = '<div class="text-gray-500 text-center py-4">Không tìm thấy phiên bản nào cho ứng dụng này.</div>';
                        return;
                    }
                    // Iterate through each version document and create a UI element
                    snapshot.forEach(doc => {
                        const version = doc.data();
                        const versionItem = document.createElement('div');
                        versionItem.id = `version-${doc.id}`; // Unique ID for the version item
                        versionItem.className = 'list-item bg-gray-100 hover:bg-blue-100 p-3 rounded-lg cursor-pointer transition duration-200 shadow-sm';
                        const date = new Date(version.timestamp); // Convert timestamp to Date object
                        versionItem.innerHTML = `
                            <p class="font-medium text-gray-700">Phiên bản: ${version.versionNumber}</p>
                            <p class="text-sm text-gray-500">${version.notes || 'Không có ghi chú'}</p>
                            <p class="text-xs text-gray-400">${date.toLocaleString()}</p>
                        `;
                        // Attach click event to select the version
                        versionItem.onclick = () => selectVersion(appId, doc.id);
                        versionsList.appendChild(versionItem);
                    });
                });
            } catch (error) {
                console.error("Error loading versions:", error);
                versionsList.innerHTML = '<div class="text-red-500 text-center py-4">Lỗi khi tải phiên bản.</div>';
                showMessage("Lỗi khi tải phiên bản.", 4000);
            }
        }

        /**
         * Selects a version and loads its code content into the viewer.
         * @param {string} appId - The ID of the application.
         * @param {string} versionId - The ID of the selected version.
         */
        async function selectVersion(appId, versionId) {
            if (!isAuthReady || !userId || !appId || !versionId) {
                showMessage('Không thể tải phiên bản. Xác thực hoặc ID bị thiếu.', 3000);
                return;
            }

            // Remove highlight from all version items
            document.querySelectorAll('#versionsList > div').forEach(item => {
                item.classList.remove('bg-blue-200', 'border-blue-500', 'border-2');
                item.classList.add('bg-gray-100');
            });
            // Add highlight to the newly selected version item
            const selectedVersionElement = document.getElementById(`version-${versionId}`);
            if (selectedVersionElement) {
                selectedVersionElement.classList.remove('bg-gray-100');
                selectedVersionElement.classList.add('bg-blue-200', 'border-blue-500', 'border-2');
            }

            // Clear previous file inputs and displayed code
            clearFileInputs();
            displayedCode.textContent = 'Đang tải mã...';
            versionFilesList.innerHTML = '<div class="text-gray-500 text-center py-2">Đang tải các tệp...</div>';

            try {
                // Query for all files within the selected version.
                const filesQuery = query(getFilesCollectionRef(appId, versionId));
                const filesSnapshot = await getDocs(filesQuery);

                versionFilesList.innerHTML = ''; // Clear the list of files for this version
                if (!filesSnapshot.empty) {
                    filesSnapshot.forEach(fileDoc => {
                        const fileData = fileDoc.data();
                        const fileItem = document.createElement('div');
                        fileItem.className = 'list-item bg-gray-100 hover:bg-blue-100 p-2 rounded-lg cursor-pointer transition duration-200 shadow-sm text-sm';
                        fileItem.textContent = fileData.filename;
                        fileItem.onclick = () => selectFileForViewing(fileData.content, fileData.filename);
                        versionFilesList.appendChild(fileItem);
                    });
                    // Automatically select the first file for viewing
                    if (filesSnapshot.docs.length > 0) {
                        const firstFile = filesSnapshot.docs[0].data();
                        selectFileForViewing(firstFile.content, firstFile.filename);
                    }
                } else {
                    versionFilesList.innerHTML = '<div class="text-gray-500 text-center py-2">Không tìm thấy tệp nào cho phiên bản này.</div>';
                    displayedCode.textContent = 'Không tìm thấy mã cho phiên bản này.';
                }
            } catch (error) {
                console.error("Error loading files for version:", error);
                versionFilesList.innerHTML = '<div class="text-red-500 text-center py-2">Lỗi khi tải tệp.</div>';
                displayedCode.textContent = 'Lỗi khi tải mã.';
                showMessage("Lỗi khi tải tệp.", 4000);
            }
        }

        /**
         * Displays the content of a selected file in the code viewer.
         * @param {string} content - The code content to display.
         * @param {string} filename - The name of the file (to infer type for highlighting).
         */
        function selectFileForViewing(content, filename) {
            displayedCode.textContent = content || 'Không tìm thấy nội dung mã.';
            // TODO: Integrate a syntax highlighter library here (e.g., Prism.js, highlight.js)
            // Example with Prism.js (requires including Prism.js CSS and JS):
            // const fileExtension = filename.split('.').pop();
            // let language = 'markup'; // Default to HTML/markup
            // if (fileExtension === 'css') language = 'css';
            // else if (fileExtension === 'js') language = 'javascript';
            // else if (fileExtension === 'json') language = 'json';
            // displayedCode.className = `language-${language}`; // Set language class
            // Prism.highlightElement(displayedCode);
        }

        // --- Multi-file Input Management ---
        /**
         * Adds a new set of file input fields (filename, filetype, textarea) to the UI.
         */
        function addFileInput() {
            fileInputCounter++;
            const fileId = `file-${fileInputCounter}`;

            const fileGroup = document.createElement('div');
            fileGroup.id = fileId;
            fileGroup.className = 'border p-3 rounded-lg bg-white shadow-sm flex flex-col gap-2';
            fileGroup.innerHTML = `
                <div class="flex items-center justify-between mb-2">
                    <label for="filename-${fileId}" class="block text-gray-700 text-sm font-bold">Tên tệp:</label>
                    <button type="button" class="remove-file-btn bg-red-500 hover:bg-red-600 text-white text-xs font-bold py-1 px-2 rounded-full" data-file-id="${fileId}">Xóa</button>
                </div>
                <input type="text" id="filename-${fileId}" placeholder="e.g., index.html" class="shadow appearance-none border rounded-lg w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline focus:border-blue-500 mb-2">
                <label for="filetype-${fileId}" class="block text-gray-700 text-sm font-bold mb-1">Loại tệp (MIME type):</label>
                <select id="filetype-${fileId}" class="shadow appearance-none border rounded-lg w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline focus:border-blue-500 mb-2">
                    <option value="text/plain">text/plain (Mặc định)</option>
                    <option value="text/html">text/html</option>
                    <option value="text/css">text/css</option>
                    <option value="application/javascript">application/javascript</option>
                    <option value="application/json">application/json</option>
                    <option value="image/svg+xml">image/svg+xml</option>
                    <!-- Add more common MIME types as needed -->
                </select>
                <label for="filecontent-${fileId}" class="block text-gray-700 text-sm font-bold mb-1">Nội dung mã:</label>
                <textarea id="filecontent-${fileId}" rows="10" class="shadow appearance-none border rounded-lg w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline focus:border-blue-500 font-mono text-sm" placeholder="Dán mã của bạn vào đây..."></textarea>
            `;
            fileInputContainer.appendChild(fileGroup);

            // Store references to the input elements
            activeFileElements[fileId] = {
                filename: document.getElementById(`filename-${fileId}`),
                filetype: document.getElementById(`filetype-${fileId}`),
                content: document.getElementById(`filecontent-${fileId}`)
            };

            // Add event listener for the remove button
            fileGroup.querySelector('.remove-file-btn').addEventListener('click', (event) => {
                const idToRemove = event.target.dataset.fileId;
                document.getElementById(idToRemove).remove();
                delete activeFileElements[idToRemove];
                showMessage('Tệp đã được xóa khỏi trình soạn thảo.', 2000);
            });

            // Add event listener to infer file type from filename
            activeFileElements[fileId].filename.addEventListener('input', (event) => {
                const filename = event.target.value;
                const filetypeSelect = activeFileElements[fileId].filetype;
                const inferredType = inferMimeType(filename);
                if (inferredType && filetypeSelect.querySelector(`option[value="${inferredType}"]`)) {
                    filetypeSelect.value = inferredType;
                } else {
                    filetypeSelect.value = 'text/plain'; // Fallback to plain text
                }
            });
        }

        /**
         * Clears all dynamically added file input fields.
         */
        function clearFileInputs() {
            fileInputContainer.innerHTML = '<div class="text-gray-500 text-center py-2">Click "Thêm tệp mới" to add files.</div>';
            activeFileElements = {};
            fileInputCounter = 0;
            versionNotesInput.value = '';
        }

        /**
         * Infers MIME type based on file extension.
         * @param {string} filename - The name of the file.
         * @returns {string|null} The inferred MIME type or null if not recognized.
         */
        function inferMimeType(filename) {
            const extension = filename.split('.').pop().toLowerCase();
            switch (extension) {
                case 'html': return 'text/html';
                case 'css': return 'text/css';
                case 'js': return 'application/javascript';
                case 'json': return 'application/json';
                case 'txt': return 'text/plain';
                case 'svg': return 'image/svg+xml';
                case 'xml': return 'application/xml';
                case 'md': return 'text/markdown';
                case 'jsx': return 'text/jsx'; // Common for React
                case 'ts': return 'application/typescript';
                case 'tsx': return 'application/typescript';
                default: return null;
            }
        }

        // --- Action Functions ---

        /**
         * Handles saving a new version of the current application to Firestore.
         */
        async function saveVersion() {
            if (!isAuthReady || !userId) {
                showMessage('Vui lòng đăng nhập để lưu phiên bản.', 3000);
                return;
            }
            if (!currentAppId) {
                showMessage('Vui lòng chọn một ứng dụng trước khi lưu phiên bản.', 3000);
                return;
            }

            const versionNotes = versionNotesInput.value.trim();
            const filesToSave = [];

            // Collect data from all active file input elements
            for (const fileId in activeFileElements) {
                const filename = activeFileElements[fileId].filename.value.trim();
                const filetype = activeFileElements[fileId].filetype.value;
                const content = activeFileElements[fileId].content.value.trim();

                if (!filename || !content) {
                    showMessage(`Tên tệp và nội dung không được để trống cho tệp ${filename || 'không tên'}.`, 4000);
                    return;
                }
                filesToSave.push({ filename, filetype, content });
            }

            if (filesToSave.length === 0) {
                showMessage('Vui lòng thêm ít nhất một tệp để lưu phiên bản.', 3000);
                return;
            }

            try {
                // Add a new version document to the versions sub-collection
                const newVersionRef = await addDoc(getVersionsCollectionRef(currentAppId), {
                    versionNumber: `v${Date.now()}`, // Simple version number using timestamp
                    notes: versionNotes || 'No notes provided',
                    timestamp: Date.now(), // Timestamp for ordering and display
                    // userId: userId, // Optional: store the user who created this version
                });
                console.log("New version added with ID:", newVersionRef.id);

                // Save each file as a separate document under the new version's files sub-collection
                for (const file of filesToSave) {
                    await addDoc(getFilesCollectionRef(currentAppId, newVersionRef.id), file);
                }
                console.log(`${filesToSave.length} files saved for version:`, newVersionRef.id);

                showMessage('Phiên bản mới đã được lưu thành công!', 3000);
                clearFileInputs(); // Clear all file inputs after successful save
                versionNotesInput.value = ''; // Clear the notes input
                // The `onSnapshot` listener for versions will automatically update the list.
            } catch (error) {
                console.error("Error saving version:", error);
                showMessage('Lưu phiên bản thất bại. Kiểm tra console để biết chi tiết.', 5000);
            }
        }

        /**
         * Copies the currently displayed code to the user's clipboard.
         */
        function copyCode() {
            const codeToCopy = displayedCode.textContent;
            // Check if there's actual code to copy
            if (codeToCopy === 'Chọn một tệp để xem mã của nó.' || codeToCopy === 'Đang tải mã...' || codeToCopy === 'Lỗi khi tải mã.' || codeToCopy === 'Không tìm thấy mã cho phiên bản này.' || codeToCopy === 'Không tìm thấy nội dung mã.') {
                showMessage('Không có mã để sao chép hoặc mã chưa được tải.', 3000);
                return;
            }
            try {
                // Use a temporary textarea to copy text, as navigator.clipboard.writeText()
                // might have restrictions in an iframe environment.
                const textArea = document.createElement("textarea");
                textArea.value = codeToCopy;
                // Position off-screen to avoid visual disruption
                textArea.style.position = "fixed";
                textArea.style.left = "-999999px";
                document.body.appendChild(textArea);
                textArea.focus();
                textArea.select(); // Select the text
                document.execCommand('copy'); // Execute the copy command
                textArea.remove(); // Remove the temporary textarea
                showMessage('Mã đã được sao chép vào clipboard!', 2000);
            } catch (err) {
                console.error('Failed to copy text: ', err);
                showMessage('Sao chép mã thất bại. Vui lòng thử thủ công.', 4000);
            }
        }

        /**
         * Shows the modal dialog for adding a new application.
         */
        function showAddNewAppModal() {
            if (!isAuthReady || !userId) {
                showMessage('Vui lòng đăng nhập để thêm ứng dụng mới.', 3000);
                return;
            }
            newAppNameInput.value = ''; // Clear the input field when showing the modal
            addNewAppModal.classList.remove('hidden'); // Make the modal visible
        }

        /**
         * Hides the modal dialog for adding a new application.
         */
        function hideAddNewAppModal() {
            addNewAppModal.classList.add('hidden'); // Hide the modal
        }

        /**
         * Adds a new application document to Firestore.
         */
        async function addNewApplication() {
            if (!isAuthReady || !userId) {
                showMessage('Vui lòng đăng nhập để thêm ứng dụng mới.', 3000);
                return;
            }
            const appName = newAppNameInput.value.trim();
            if (!appName) {
                showMessage('Tên ứng dụng không được để trống.', 3000);
                return;
            }

            try {
                // Add a new document to the applications collection
                await addDoc(getApplicationsCollectionRef(), {
                    name: appName,
                    createdAt: Date.now(), // Timestamp for creation
                    // createdBy: userId, // Optional: store the user who created this app
                });
                showMessage(`Ứng dụng "${appName}" đã được thêm thành công!`, 3000);
                hideAddNewAppModal(); // Close the modal
                // The `onSnapshot` listener for applications will automatically update the list.
            } catch (error) {
                console.error("Error adding new application:", error);
                showMessage('Thêm ứng dụng mới thất bại. Kiểm tra console để biết chi tiết.', 5000);
            }
        }

        // --- Event Listeners ---
        saveVersionBtn.addEventListener('click', saveVersion);
        copyCodeBtn.addEventListener('click', copyCode);
        addNewAppBtn.addEventListener('click', showAddNewAppModal);
        confirmNewAppBtn.addEventListener('click', addNewApplication);
        cancelNewAppBtn.addEventListener('click', hideAddNewAppModal);
        addFileInputBtn.addEventListener('click', addFileInput); // New event listener for adding file inputs

        // Auth event listeners
        loginBtn.addEventListener('click', handleLogin);
        registerBtn.addEventListener('click', handleRegister);
        logoutBtn.addEventListener('click', handleLogout);

        // Initial load of applications is triggered by the onAuthStateChanged listener
        // once authentication is confirmed ready and user is logged in.
    </script>
</body>
</html>
